# W3C Shapes Constraint Language (SHACL) Vocabulary
# Draft last edited 2016-07-05

@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vs:      <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd:	 <http://www.w3.org/2001/XMLSchema#> .

@prefix sh: <http://www.w3.org/ns/shacl#> .

sh:
	a owl:Ontology ;
	rdfs:comment """
		This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language.
		This vocabulary is under development by the W3C Data Shapes Working Group.
		The status of each term in this vocabulary is assumed to be <em>stable</em> unless they are marked using
		<a href="http://www.w3.org/2003/06/sw-vocab-status/note">Term-centric Semantic Web Vocabulary Annotations</a>.
		"""^^rdf:HTML ;
	rdfs:label "W3C Shapes Constraint Language (SHACL) Vocabulary" ;
	rdfs:seeAlso
		<https://www.w3.org/2014/data-shapes/wiki/Main_Page> ,
		<http://www.w3.org/TR/2015/WD-shacl-ucr-20150414/> ,
		<http://www.w3.org/TR/2015/WD-shacl-20151008/> ;
.


# Shapes vocabulary -----------------------------------------------------------

sh:Shape
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Shape" ;
	rdfs:comment """
		The class of SHACL shapes.
		A shape is a grouping of descriptive information and constraints that can be applied to a node in a data graph.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:constraint
	a rdf:Property ;
	rdfs:comment """
		This property links a Shape to its node constraints.
		"""^^rdf:HTML ;
	rdfs:label "constraint" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:NodeConstraint ;
	rdfs:isDefinedBy sh: ;
	sh:defaultValueType sh:NodeConstraint ;
.

sh:filterShape
	a rdf:Property ;
	rdfs:label "filter shape" ;
	rdfs:comment """
		This property links a Shape to other Shapes that the tested nodes need to fulfill before the constraints of the Shape are evaluated.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	sh:defaultValueType sh:Shape ;
.

sh:property
	a rdf:Property ;
	rdfs:comment """
		This property links a shape to one of its property constraints.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "property" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:PropertyConstraint ;
	sh:defaultValueType sh:PropertyConstraint ;
.

sh:scope
	a rdf:Property ;
	rdfs:label "scope" ;
	rdfs:comment """
		This property links a shape to a scope.
		The shape must be satisfied by all the nodes in the scope.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Scope ;
	rdfs:isDefinedBy sh: ;
.

sh:scopeClass 
	a rdf:Property ;
	rdfs:label "scope class" ;
	rdfs:comment """
		This property links a shape to a class.
		The shape must be satisfied by all the instances of the class.
		In this context, a resource is regarded as an instance of a class if there is an explicit rdf:type triple
		linking the resource to the class or any of its subclasses as determined by explicit <code>rdfs:subClassOf</code> triples.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
.

sh:scopeNode 
	a rdf:Property ;
	rdfs:label "scope node" ;
	rdfs:comment """
		This property links a shape to individual resources.
		The shape must be satisfied by resources linked this way.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:isDefinedBy sh: ;
.

sh:scopeInverseProperty
	a rdf:Property ;
	rdfs:label "scope inverse property" ;
	rdfs:domain sh:Shape ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:scopeProperty
	a rdf:Property ;
	rdfs:label "scope property" ;
	rdfs:domain sh:Shape ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


# Node kind vocabulary --------------------------------------------------------

sh:NodeKind
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Node kind" ;
	rdfs:comment """
		The class of all node kinds. 
		A node is either a
		<code>sh:BlankNode</code>,
		<code>sh:IRI</code>, or
		<code>sh:Literal</code>, or
		one of the combinations thereof:
		<code>sh:BlankNodeOrIRI</code>,
		<code>sh:BlankNodeOrLiteral</code>,
		<code>sh:IRIOrLiteral</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNode
	a sh:NodeKind ;
	rdfs:label "Blank node" ;
	rdfs:comment "The node kind of all blank nodes." ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNodeOrIRI
	a sh:NodeKind ;
	rdfs:label "Blank node or IRI" ;
	rdfs:comment "The node kind of all blank nodes or IRIs." ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNodeOrLiteral
	a sh:NodeKind ;
	rdfs:label "Blank node or Literal" ;
	rdfs:comment "The node kind of all blank nodes or Literals." ;
	rdfs:isDefinedBy sh: ;
.

sh:IRI
	a sh:NodeKind ;
	rdfs:label "IRI" ;
	rdfs:comment "The node kind of all IRIs." ;
	rdfs:isDefinedBy sh: ;
.

sh:IRIOrLiteral
	a sh:NodeKind ;
	rdfs:label "IRI or Literal" ;
	rdfs:comment "The node kind of all IRIs or Literals." ;
	rdfs:isDefinedBy sh: ;
.

sh:Literal
	a sh:NodeKind ;
	rdfs:label "Literal" ;
	rdfs:comment "The node kind of all literals." ;
	rdfs:isDefinedBy sh: ;
.


# Results vocabulary ----------------------------------------------------------

sh:AbstractResult
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Abstract Result" ;
	rdfs:comment "Instances of subclasses of this class can be constructed during constraint validation." ;
	rdfs:isDefinedBy sh: ;
.

sh:ValidationResult
	a rdfs:Class ;
	rdfs:subClassOf sh:AbstractResult ;
	rdfs:label "Validation Result" ;
	rdfs:comment """
		The class of all validation results.
		A SHACL validator takes as input a shapes graph and a data graph, and produces as output a results graph.
		The data graph satisfies the shapes graph if and only if the results graph contains no violation-level validation results.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Severity
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Severity" ;
	rdfs:comment """
		The class of all validation result severity levels.
		A severity level is
		<code>sh:Info</code>,
		<code>sh:Warning</code>, or
		<code>sh:Violation</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Info
	a sh:Severity ;
	rdfs:label "Info" ;
	rdfs:comment """
		The severity for an informational validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Violation
	a sh:Severity ;
	rdfs:label "Violation" ;
	rdfs:comment """
		The severity for a violation validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Warning
	a sh:Severity ;
	rdfs:label "Warning" ;
	rdfs:comment """
		The severity for a warning validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:detail
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:AbstractResult ;
	rdfs:label "detail" ;
	rdfs:comment """
		Can link a result with other results that provide more details.
		This is especially useful to describe violations against nested patterns or shapes.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:focusNode
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "focus node" ;
	rdfs:comment "The focus node evaluated when the result was produced." ;
	rdfs:isDefinedBy sh: ;
.

sh:message
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:SPARQLConstraint or sh:SPARQLSelectValidator or sh:SPARQLAskValidator
	# rdfs:range: sh:datatypeIn ( xsd:string rdf:langString ) ;
	rdfs:label "message" ;
	rdfs:comment """
		A human-readable message (possibly with placeholders for variables) explaining the cause of the result.
		Multiple values are possible assuming they have different languages.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:subject
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range rdfs:Resource ;
	rdfs:label "subject" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the subject node that is associated with the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:predicate
	a rdf:Property ;
	rdfs:comment """
		This property is used to specify the predicate of property constraints.
		"""^^rdf:HTML ;
	rdfs:label "predicate" ;
	rdfs:domain sh:PropertyConstraint ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:object
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "object" ;
	rdfs:comment "The object of triples involved in this result." ;
	rdfs:isDefinedBy sh: ;
.
	
sh:severity
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:Constraint
	rdfs:range sh:Severity ;
	rdfs:label "severity" ;
	rdfs:comment """
		The severity of the result.
		When used at constraints, this defines the severity that produced results shall have.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceConstraint
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Constraint ;
	rdfs:label "source constraint" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the constraint that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceShape
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Shape ;
	rdfs:label "source shape" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the shape that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceConstraintComponent
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:ConstraintComponent ;
	rdfs:label "source constraint component" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the constraint component that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:value
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "value" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with an RDF node that is represents the value of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.


# SPARQL execution support ----------------------------------------------------

sh:SPARQLExecutable
	a rdfs:Class ;
	rdfs:label "SPARQL executable" ;
	rdfs:comment """
		Class of resources that encapsulate a SPARQL query.
		This class may also be used to declare other properties required by SPARQL engines.
		"""^^rdf:HTML ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLAskExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL ASK executable" ;
.

sh:ask
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLAskExecutable ;
	rdfs:label "ask" ;
	rdfs:comment "The SPARQL ASK query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLConstructExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL CONSTRUCT executable" ;
.

sh:construct
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLConstructExecutable ;
	rdfs:label "construct" ;
	rdfs:comment "The SPARQL CONSTRUCT query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLSelectExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL SELECT executable" ;
.

sh:select
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLSelectExecutable ;
	rdfs:label "select" ;
	rdfs:comment "The SPARQL SELECT query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLUpdateExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL UPDATE executable" ;
.

sh:update
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLUpdateExecutable ;
	rdfs:label "update" ;
	rdfs:comment "The SPARQL UPDATE to execute." ;
	rdfs:isDefinedBy sh: ;
.


# Scope vocabulary ------------------------------------------------------------

sh:Scope
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Scope" ;
	rdfs:comment """
		The class of scopes.
		A scope defines a set of nodes in the data graph.
		Each node in the scope of a shape becomes the focus node for each constraint in the shape when at SHACL validator validates a data graph against a shapes graph.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL scope" ;
	rdfs:comment """
		A scope that has a SPARQL SELECT query attached to it.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:ScopeType
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Scope type" ;
	rdfs:comment """
		The (meta) class for parameterizable scopes.
		Instances of this are instantiated as values of <code>sh:scope</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "unstable" ;
.

sh:SPARQLScopeType
	a rdfs:Class ;
	rdfs:subClassOf sh:ScopeType ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL scope type" ;
	rdfs:comment """
		The (meta) class for parameterizable scopes that are backed by a SPARQL SELECT query.
		"""^^rdf:HTML ;
.


# Constraint metamodel --------------------------------------------------------

sh:Constraint
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Constraint" ;
	rdfs:comment """
		The class of constraints.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:NodeConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Node constraint" ;
	rdfs:comment """
		The class of (general) constraints about a given node.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:PropertyConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Property constraint" ;
	rdfs:comment """
		The class of constraints that are about a given subject/predicate combination.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.


# Path vocabulary -------------------------------------------------------------

sh:path
	a rdf:Property ;
	rdfs:comment """
		This property is used to specify a path in constraints.
		The values are either:
		<ul>
			<li>nodes that are rdf:Lists (for sequence paths)</li>
			<li>nodes with exactly one value for either sh:inversePath, sh:alternativePath, sh:zeroOrMorePath, sh:oneOrMorePath or sh:zeroOrOnePath</li>
			<li>IRIs (for a single predicate path)</li>
		</ul>
		"""^^rdf:HTML ;
	rdfs:label "path" ;
	rdfs:domain sh:PathConstraint ;
	rdfs:range rdfs:Resource ;
	rdfs:isDefinedBy sh: ;
.

sh:inversePath
	a rdf:Property ;
	rdfs:label "inverse path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 InversePath.
		The (single) value of this property represents an inverse path (object to subject).
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:alternativePath
	a rdf:Property ;
	rdfs:label "alternative path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 AlternativePath.
		The (single) value of this property must be an rdf:List of path elements.
		"""^^rdf:HTML ;
	rdfs:range rdfs:List ;
.

sh:zeroOrMorePath
	a rdf:Property ;
	rdfs:label "zero or more path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 ZeroOrMorePath.
		The (single) value of this property represents a path that is matched zero or more times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:oneOrMorePath
	a rdf:Property ;
	rdfs:label "one or more path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 OneOrMorePath.
		The (single) value of this property represents a path that is matched one or more times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:zeroOrOnePath
	a rdf:Property ;
	rdfs:label "zero or one path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 ZeroOrOnePath.
		The (single) value of this property represents a path that is matched zero or one times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.


# Parameters metamodel --------------------------------------------------------

sh:Parameterizable
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Parameterizable" ;
	rdfs:comment """
		Superclass of components that can take parameters, especially Functions and ConstraintComponents.
		Parameters are declared using instances of sh:Parameter via the property sh:parameter.
		"""^^rdf:HTML ;
.

sh:parameter
	a rdf:Property ;
	rdfs:label "parameter" ;
	rdfs:comment """
		Links a <code>sh:Parameterizable</code> with instances of <code>sh:Parameter</code>.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameterizable ;
	rdfs:range sh:Parameter ;
	sh:defaultValueType sh:Parameter ;
.

sh:labelTemplate
	a rdf:Property ;
	rdfs:label "label template" ;
	rdfs:comment """
		Outlines how human-readable labels of instances of the associated sh:Parameterizable shall be produced.
		The values must be strings that can contain {?paramName} as placeholders for the actual values of the given parameter.
		There may be multiple values, for different languages.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameterizable ;
	# range: sh:datatypeIn ( xsd:string rdf:langString ) ;
.

sh:Parameter
	a rdfs:Class ;
	rdfs:subClassOf sh:PropertyConstraint ;
	rdfs:label "Parameter" ;
	rdfs:comment """
		Instances of this class define a parameter, possibly together with information about allowed value type, cardinality and other characteristics.
		"""^^rdf:HTML ;
.

sh:optional
	a rdf:Property ;
	rdfs:label "optional" ;
	rdfs:comment """
		Indicates whether a parameter is optional.
		If set to true, then a Parameterizable can be executed even if it has no value for the Parameter.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameter ;
	rdfs:range xsd:boolean ;
.


# Constraint components metamodel ---------------------------------------------

sh:ConstraintComponent
	a rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Constraint component" ;
	rdfs:comment """
		The class of constraint components such as <code>sh:PatternConstraintComponent</code>.
		Constraint components serve as containers to group together the properties used in a constraint,
		for example <code>sh:pattern</code> and <code>sh:flags</code>.
		These properties can be linked to the constraint component via <code>sh:parameter</code>.
		Constraint components can also have links to validators (e.g. in SPARQL) that can be discovered by implementations,
		using the properties <code>sh:validator</code>, <code>sh:nodeValidator</code> and <code>sh:propertyValidator</code>.
		"""^^rdf:HTML ;
.

sh:context
	a rdf:Property ;
	rdfs:label "context" ;
	rdfs:comment """
		The context under which a constraint component applies.
		Values must be either <code>sh:NodeConstraint</code> or <code>sh:PropertyConstraint</code>.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range rdfs:Class ;
.

sh:validator
	a rdf:Property ;
	rdfs:label "validator" ;
	rdfs:comment """
		The validator(s) used to evaluate either node or property constraints.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:nodeValidator
	a rdf:Property ;
	rdfs:label "node validator" ;
	rdfs:comment """
		The validator(s) used to evaluate node constraints.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:propertyValidator
	a rdf:Property ;
	rdfs:label "property validator" ;
	rdfs:comment """
		The validator(s) used to evaluate property constraints.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:Validator
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Validator" ;
	rdfs:comment """
		A validator provides instructions on how to process a constraint definition.
		This class serves as base class for the SPARQL-based validators and other possible implementations.
		"""^^rdf:HTML ;
.

sh:SPARQLAskValidator
	a rdfs:Class ;
	rdfs:subClassOf sh:Validator ;
	rdfs:subClassOf sh:SPARQLAskExecutable ;
	rdfs:label "SPARQL ASK validator" ;
	rdfs:comment """
		A sh:Validator based on a SPARQL ASK query, represented using <code>sh:ask</code>.
		The query is evaluated for each value node and is supposed to return <code>true</code> if
		the given node is valid.
		"""^^rdf:HTML ;
.

sh:SPARQLSelectValidator
	a rdfs:Class ;
	rdfs:subClassOf sh:Validator ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL SELECT validator" ;
	rdfs:comment """
		A sh:Validator based on a SPARQL SELECT query, represented using <code>sh:select</code>.
		"""^^rdf:HTML ;
.

sh:SPARQLConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL constraint" ;
	rdfs:comment """
		A constraint based on a SPARQL query, via <code>sh:select</code>.
		Instances of this class are directly associated with a shape using <code>sh:sparql</code>.
		"""^^rdf:HTML ;
.

sh:sparql
	a rdf:Property ;
	rdfs:label "SPARQL constraint" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:SPARQLConstraint ;
	sh:defaultValueType sh:SPARQLConstraint ;
.

# Library of Core Constraint Components and their properties ------------------

sh:AndConstraintComponent
	a sh:ConstraintComponent ;
	rdfs:label "And constraint component" ;
	rdfs:comment """
		This constraint component can be used to describe the intersection of multiple shapes.
		The parameter <code>sh:and</code> points at a list of <code>sh:Shape</code> instances.
		Valid nodes must validate successfully against all shapes in the list.
		"""^^rdf:HTML ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:and ;
	] ;
.

sh:and
	a rdf:Property ;
	rdfs:label "and" ;
	rdfs:comment """
		Links a constraint with a list of shapes.
		"""^^rdf:HTML ;
	rdfs:range rdf:List ;
	rdfs:isDefinedBy sh: ;
.

sh:ClassConstraintComponent 
	a sh:ConstraintComponent ;
	rdfs:label "Class constraint component" ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:class ;
	] ;
.

sh:class
	a rdf:Property ;
	rdfs:label "class" ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
.

sh:ClassInConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:classIn ;
	] ;
.

sh:classIn
	a rdf:Property ;
	rdfs:label "class in" ;
	rdfs:range rdf:List ;   # members: rdfs:Class
	rdfs:isDefinedBy sh: ;
.

sh:ClosedConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint ;
	sh:parameter [
		sh:predicate sh:closed ;
	] ;
	sh:parameter [
		sh:predicate sh:ignoredProperties ;
		sh:optional true ;
	] ;
.

sh:closed
	a rdf:Property ;
	rdfs:label "closed" ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
.

sh:ignoredProperties
	a rdf:Property ;
	rdfs:label "ignored properties" ;
	rdfs:range rdf:List ;    # members: rdf:Property
	rdfs:isDefinedBy sh: ;
.

sh:Closed
	a sh:NodeConstraint ;
	sh:closed true ;
.

sh:DatatypeConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:datatype ;
	] ;
.

sh:datatype
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an RDF datatype.
		The constraint is violated if the context node set is not a subset of dataype.
		"""^^rdf:HTML ;
	rdfs:label "datatype" ;
	rdfs:range rdfs:Datatype ;
	rdfs:isDefinedBy sh: ;
.

sh:DatatypeInConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:datatypeIn ;
	] ;
.

sh:datatypeIn
	a rdf:Property ;
	rdfs:label "datatype in" ;
	rdfs:range rdf:List ;     # members: rdfs:Datatype
	rdfs:isDefinedBy sh: ;
.

sh:DisjointConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:disjoint ;
	] ;
.

sh:disjoint
	a rdf:Property ;
	rdfs:label "disjoint" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:EqualsConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:equals ;
	] ;
.

sh:equals
	a rdf:Property ;
	rdfs:label "equals" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:HasValueConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:hasValue ;
	] ;
.

sh:hasValue
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a value.
		The constraint is violated if the specified value is not a member of the context node set.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "hasValue" ;
.

sh:InConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:in ;
	] ;
.

sh:in
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a list of allowed values.
		The constraint is violated if the context node set is not a subset of the set of allowed values.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "in" ;
	rdfs:range rdf:List ;
.

sh:LessThanConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:lessThan ;
	] ;
.

sh:lessThan
	a rdf:Property ;
	rdfs:label "less than" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:LessThanOrEqualsConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:lessThanOrEquals ;
	] ;
.

sh:lessThanOrEquals
	a rdf:Property ;
	rdfs:label "less than or equals" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:MaxCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:maxCount ;
		sh:datatype xsd:integer ;
	] ;
.

sh:maxCount
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		The constraint is violated if number of members in the set of context nodes is greater than the <code>maxCount</code> value.
		"""^^rdf:HTML ;
	rdfs:label "max count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:MaxExclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:maxExclusive ;
		sh:nodeKind sh:Literal ;
	] ;
.

sh:maxExclusive
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		The constraint is violated if the value of any context node is greater than or equal to the <code>maxExclusive</code> value.
		"""^^rdf:HTML ;
	rdfs:label "max exclusive" ;
	rdfs:isDefinedBy sh: ;
.

sh:MaxInclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:maxInclusive ;
		sh:nodeKind sh:Literal ;
	] ;
.

sh:maxInclusive
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		The constraint is violated if value of any context node is greater than the <code>maxInclusive</code> value.
		"""^^rdf:HTML ;
	rdfs:label "max inclusive" ;
	rdfs:isDefinedBy sh: ;
.

sh:MaxLengthConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:maxLength ;
		sh:datatype xsd:integer ;
	] ;
.

sh:maxLength
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer.
		The constraint is violated if the string length of the context node is greater than the <code>maxLength</code> value.
		The definition of string length is the same as that used in the SPARQL <code>STRLEN()</code> function.
		"""^^rdf:HTML ;
	rdfs:label "max length" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:MinCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:minCount ;
		sh:datatype xsd:integer ;
	] ;
.

sh:minCount
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		The constraint is violated if number of members in the set of context nodes is less than the <code>minCount</code> value.
		"""^^rdf:HTML ;
	rdfs:label "min count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:MinExclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:minExclusive ;
		sh:nodeKind sh:Literal ;
	] ;
.

sh:minExclusive
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		The constraint is violated if the value of any context node is less than or equal to the <code>minExclusive</code> value.
		"""^^rdf:HTML ;
	rdfs:label "min exclusive" ;
	rdfs:isDefinedBy sh: ;
.

sh:MinInclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:minInclusive ;
		sh:nodeKind sh:Literal ;
	] ;
.

sh:minInclusive
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		The constraint is violated if the value of any context node is less than to the <code>minInclusive</code> value.
		"""^^rdf:HTML ;
	rdfs:label "min inclusive" ;
	rdfs:isDefinedBy sh: ;
.

sh:MinLengthConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:minLength ;
		sh:datatype xsd:integer ;
	] ;
.

sh:minLength
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		The constraint is violated if the string length of any context node is less than the <code>minLength</code> value.
		The definition of string length is the same as that used in the SPARQL <code>STRLEN()</code> function.
		"""^^rdf:HTML ;
	rdfs:label "min length" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:NodeKindConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:nodeKind ;
		sh:class sh:NodeKind ;
		sh:in ( sh:BlankNode sh:IRI sh:Literal sh:BlankNodeOrIRI sh:BlankNodeOrLiteral sh:IRIOrLiteral ) ;
	] ;
.

sh:nodeKind
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a node kind.
		The constraint is violated if some context node is not of the specified kind.
		"""^^rdf:HTML ;
	rdfs:label "node kind" ;
	rdfs:range sh:NodeKind ;
	rdfs:isDefinedBy sh: ;
.

sh:NotConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:not ;
	] ;
.

sh:not
	a rdf:Property ;
	rdfs:label "not" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	sh:defaultValueType sh:Shape ;
.

sh:OrConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:or ;
	] ;
.

sh:or
	a rdf:Property ;
	rdfs:label "or" ;
	rdfs:range rdf:List ;    # members: sh:Shape ;
	rdfs:isDefinedBy sh: ;
.

sh:PatternConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:pattern ;
		sh:datatype xsd:string ;
		sh:order 0 ;
	] ;
	sh:parameter [
		sh:predicate sh:flags ;
		sh:datatype xsd:string ;
		sh:optional true ;
		sh:order 1 ;
	] ;
.

sh:flags
	a rdf:Property ;
	rdfs:label "flags" ;
	rdfs:comment """
		This property is an optional constraint parameter that defines flags to be used with regular expression pattern matching.
		When present it requires the presence of <code>sh:pattern</code>.
		Its syntax is the same as that used by the SPARQL <code>REGEX()</code> function.
		The constraint is violated when any context node fails to match the regular expression defined
		by the pattern and modified by the flags.
		"""^^rdf:HTML ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.

sh:pattern
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a regular expression pattern in the same syntax as that defined for the SPARQL <code>REGEX()</code> function.
		If the property <code>sh:flags</code> is present then its value defines flags to be used for pattern matching.
		The constraint is violated if some context node does not match the regular expression.
		"""^^rdf:HTML ;
	rdfs:label "pattern" ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.

sh:StemConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:NodeConstraint, sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:stem ;
		sh:datatype xsd:string ;
	] ;
.

sh:stem
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a string value that the IRI of the value nodes must start with.
		"""^^rdf:HTML ;
	rdfs:label "stem" ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.

sh:QualifiedMaxCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:qualifiedMaxCount ;
		sh:datatype xsd:integer ;
	] ;
	sh:parameter [
		sh:predicate sh:qualifiedValueShape ;
	] ;
.

sh:QualifiedMinCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:qualifiedMinCount ;
		sh:datatype xsd:integer ;
	] ;
	sh:parameter [
		sh:predicate sh:qualifiedValueShape ;
	] ;
.

sh:qualifiedMaxCount
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		It requires the presence of sh:qualifedValueShape which specifies a value shape.
		The constraint is violated if the number of context nodes that satisfy the value shape 
		is greater than the qualifiedMaxCount value.
		"""^^rdf:HTML ;
	rdfs:label "qualified max count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:qualifiedMinCount
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies an integer value.
		It requires the presence of sh:qualifedValueShape which specifies a value shape.
		The constraint is violated if the number of context nodes that satisfy the value shape 
		is less than the qualifiedMinCount value.
		"""^^rdf:HTML ;
	rdfs:label "qualified min count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:qualifiedValueShape
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a value shape.
		It requires the presence of
		<code>sh:qualifiedMaxCount</code> or
		<code>sh:qualifiedMinCount></code>.
		The constraint is violated if the number of context nodes that satisfy the value shape is less than the minimum
		or greater than the maximum.
		"""^^rdf:HTML ;
	rdfs:label "qualified value shape" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	sh:defaultValueType sh:Shape ;
.

sh:ShapeConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:shape ;
	] ;
.

sh:shape
	a rdf:Property ;
	rdfs:label "shape" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	sh:defaultValueType sh:Shape ;
.

sh:UniqueLangConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:uniqueLang ;
		sh:datatype xsd:boolean ;
	] ;
.

sh:uniqueLang
	a rdf:Property ;
	rdfs:comment """
		This property is a constraint parameter.
		It specifies a boolean value.
		The constraint is violated if the boolean value is <code>true</code>
		and two or more value nodes have the same language tags.
		"""^^rdf:HTML ;
	rdfs:label "unique lang" ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
.


# Derived Values support ------------------------------------------------------

sh:DerivedValuesConstraintComponent
	a sh:ConstraintComponent ;
	sh:context sh:PropertyConstraint ;
	sh:parameter [
		sh:predicate sh:derivedValues ;
		sh:class sh:ValuesDeriver ;
		sh:name "derived values" ;
		sh:description """
			Points at an object that wraps an executable body (e.g. a SPARQL query)
			that computes all values for the given property.
			"""^^rdf:HTML ;
	] ;
.

sh:derivedValues
	a rdf:Property ;
	rdfs:label "derived values" ;
	rdfs:comment """
		Links a constraint with a <code>sh:ValuesDeriver</code> used to compute the property values.
		"""^^rdf:HTML ;
	rdfs:range sh:ValuesDeriver ;
	sh:defaultValueType sh:SPARQLValuesDeriver ;
.

sh:ValuesDeriver
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Values deriver" ;
	rdfs:comment """
		The class of objects that can be used to derive values in conjunction with <code>sh:derivedValues</code>.
		SHACL only defines a single subclass, <code>sh:SPARQLValuesDeriver</code>, but this is an extension point.
		"""^^rdf:HTML ;
.

sh:SPARQLValuesDeriver
	a rdfs:Class ;
	rdfs:subClassOf sh:ValuesDeriver ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL values deriver" ;
.


# Non-validating constraint properties ----------------------------------------

sh:defaultValue
	a rdf:Property ;
	rdfs:label "default value" ;
	rdfs:domain sh:PredicateBasedConstraint ;
	rdfs:isDefinedBy sh: ;
.

sh:description
	a rdf:Property ;
	rdfs:label "description" ;
	rdfs:domain sh:PredicateBasedConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
.

sh:group
	a rdf:Property ;
	rdfs:label "group" ;
	rdfs:domain sh:PredicateBasedConstraint ;
	rdfs:range sh:PropertyGroup ;
	rdfs:isDefinedBy sh: ;
.

sh:name
	a rdf:Property ;
	rdfs:label "name" ;
	rdfs:domain sh:PredicateBasedConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
.

sh:order
	a rdf:Property ;
	rdfs:label "order" ;
	# rdfs:domain sh:Constraint or sh:PropertyGroup
	# rdfs:range xsd:decimal or xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:PropertyGroup
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Property group" ;
	rdfs:comment "Instances of this class represent groups of property constraints that belong together." ;
	rdfs:isDefinedBy sh: ;
.


# Functions Vocabulary --------------------------------------------------------

sh:Function
	a rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Function" ;
	rdfs:comment """
		An object implementing a function that may take parameters, implemented in an executable language such as SPARQL.
		"""^^rdf:HTML ;
.

sh:returnType
	a rdf:Property ;
	rdfs:label "return type" ;
	rdfs:comment """
		The expected type of values returned by the associated function.
		"""^^rdf:HTML ;
	rdfs:domain sh:Function ;
	rdfs:range rdfs:Class ;
.

sh:SPARQLFunction
	a rdfs:Class ;
	rdfs:subClassOf sh:Function ;
	rdfs:subClassOf sh:SPARQLAskExecutable ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:comment "A Function backed by a SPARQL query - either ASK or SELECT." ;
.

sh:hasShape
	a sh:Function ;
	rdfs:label "has shape" ;
	rdfs:comment """
		A built-in function of the SHACL SPARQL extension mechanism.
		Can be used to validate a given (focus) node against a given shape,
		returning <code>true</code> if the node is valid.
		"""^^rdf:HTML ;
	sh:returnType xsd:boolean ;
	sh:parameter [
		sh:predicate sh:node ;
		sh:description "The node to validate." ;
	] ;
	sh:parameter [
		sh:predicate sh:shape ;
		sh:description "The shape that the node is supposed to have." ;
	] ;
	sh:parameter [
		sh:predicate sh:shapesGraph ;
		sh:description "The shapes graph to operate on.";
	] ;
.

# Result Annotations ----------------------------------------------------------

sh:resultAnnotation
	a rdf:Property ;
	rdfs:label "result annotation" ;
	rdfs:comment """
		Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.
		"""^^rdf:HTML ;
	rdfs:domain sh:SPARQLSelectValidator ;
	rdfs:range sh:ResultAnnotation ;
.

sh:ResultAnnotation
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Result annotation" ;
	rdfs:comment "Defines the rules to derive the values of a given annotation property as extra values for a constraint violation." ;
	rdfs:isDefinedBy sh: ;
.

sh:annotationProperty
	a rdf:Property ;
	rdfs:label "annotation property" ;
	rdfs:comment "The annotation property that shall be set." ;
	rdfs:domain sh:ResultAnnotation ;
	rdfs:range rdf:Property ;
.

sh:annotationValue
	a rdf:Property ;
	rdfs:label "annotation value" ;
	rdfs:comment "The values of the annotation property." ;
	rdfs:domain sh:ResultAnnotation ;
.

sh:annotationVarName
	a rdf:Property ;
	rdfs:label "annotation variable name" ;
	rdfs:comment "The name of the SPARQL variable from the SELECT clause that shall be used for the values." ;
	rdfs:domain sh:ResultAnnotation ;
	rdfs:range xsd:string ;
.


sh:defaultValueType
	a rdf:Property ;
	rdfs:label "default value type" ;
	rdfs:comment """
		Links a property with a default value type.
		The default value type is assumed to be the <code>rdf:type</code> of values of the property
		that declare no type on their own.
		An example use of <code>sh:defaultValueType</code> is <code>sh:property</code>,
		the values of which are assumed to be instances of <code>sh:PropertyConstraint</code>
		even if they are untyped (blank) nodes.
		"""^^rdf:HTML ;
	rdfs:domain rdf:Property ;
	rdfs:range rdfs:Class ;
.

sh:DefaultValueTypeRule
	a sh:SPARQLConstructExecutable ;
	rdfs:label "default value type inference rule" ;
	rdfs:comment """
		A resource encapsulating a query that can be used to construct rdf:type triples for certain untyped nodes
		that are an object in a triple where the predicate has a sh:defaultValueType.
		This can be used as a pre-processor for shape graphs before they are validated.
		"""^^rdf:HTML ;
	sh:construct """
		CONSTRUCT {
			?node a ?defaultValueType .
		}
		WHERE {
			?predicate sh:defaultValueType ?defaultValueType .
			?anySubject ?predicate ?node .
			FILTER (NOT EXISTS { ?node a ?anyType }) .
		}
		""" ;
.
